<%
  iaas_list = %w(gcp vsphere vsphere-lb gcp-lb aws-lb openstack-lb)
%>
---
resource_types:
- name: pull-request
  type: docker-image
  source:
    repository: jtarchie/pr

- name: gcs
  type: docker-image
  source:
    repository: frodenas/gcs-resource

resources:
- name: git-kubo-ci
  type: git
  source:
    uri: https://github.com/pivotal-cf-experimental/kubo-ci
    branch: master

- name: git-kubo-deployment
  type: pull-request
  source:
    repo: cloudfoundry-incubator/kubo-deployment
    uri: git@github.com:cloudfoundry-incubator/kubo-deployment
    base: master
    private_key: ((git-ssh-key))
    access_token: ((github-token-key))

<% iaas_list.each do |iaas| %>
- name: kubo-lock-<%= iaas %>
  type: pool
  source:
    uri: git@github.com:pivotal-cf-experimental/kubo-locks.git
    branch: master
    private_key: ((git-ssh-key))
    pool: kubo-<%= iaas %>
<% end %>

- name: gcs-bosh-state
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store
    versioned_file: bosh/state.json

- name: gcs-bosh-creds
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store
    versioned_file: bosh/creds.yml

- name: gcs-kubo-release-tarball
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-public
    versioned_file: kubo-release-latest.tgz

jobs:
- name: run-unit-tests
  plan:
  - get: git-kubo-ci
  - get: git-kubo-deployment
    version: every
  - put: git-kubo-deployment
    params:
      path: git-kubo-deployment
      status: pending
  - task: run-deployment-unit-tests
    file: git-kubo-ci/tasks/run-deployment-unit-tests.yml
    on_failure:
      put: git-kubo-deployment
      params:
        path: git-kubo-deployment
        status: failure

<% iaas_list.each do |iaas| %>
- name: claim-lock-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-deployment
      passed: ['run-unit-tests' ]
      version: every
      trigger: true
  - put: git-kubo-deployment
    params:
      path: git-kubo-deployment
      status: pending
  - put: kubo-lock-<%= iaas %>
    params: { acquire: true }

- name: install-bosh-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: git-kubo-deployment
      passed: [ 'claim-lock-<%= iaas %>' ]
    - get: kubo-lock-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'claim-lock-<%= iaas %>' ]
  - put: git-kubo-deployment
    params:
      path: git-kubo-deployment
      status: pending
  - task: install
    tags: [<%= iaas %>]
    file: git-kubo-ci/tasks/install-bosh.yml
    input_mapping: {kubo-lock: kubo-lock-<%= iaas %>}
    on_failure: &on_failure_<%= iaas %>
      put: git-kubo-deployment
      params:
        path: git-kubo-deployment
        status: failure
  - aggregate:
    - put: gcs-bosh-creds
      params:
        file: bosh-creds/creds.yml
    - put: gcs-bosh-state
      params:
        file: bosh-state/state.json

- name: deploy-k8s-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'install-bosh-<%= iaas %>' ]
    - get: git-kubo-deployment
      passed: [ 'install-bosh-<%= iaas %>' ]
    - get: gcs-kubo-release-tarball
    - get: gcs-bosh-state
      passed: [ 'install-bosh-<%= iaas %>' ]
    - get: gcs-bosh-creds
      passed: [ 'install-bosh-<%= iaas %>' ]
  - put: git-kubo-deployment
    params:
      path: git-kubo-deployment
      status: pending
  - task: deploy
    tags: [<%= iaas %>]
    file: git-kubo-ci/tasks/deploy-k8s-instance.yml
    input_mapping: {kubo-lock: kubo-lock-<%= iaas %>}
    on_failure: *on_failure_<%= iaas %>

- name: run-k8s-integration-tests-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'deploy-k8s-<%= iaas %>' ]
    - get: git-kubo-deployment
      passed: [ 'deploy-k8s-<%= iaas %>' ]
    - get: gcs-bosh-state
      passed: [ 'deploy-k8s-<%= iaas %>' ]
    - get: gcs-bosh-creds
      passed: [ 'deploy-k8s-<%= iaas %>' ]
  - put: git-kubo-deployment
    params:
      path: git-kubo-deployment
      status: pending
  - task: integration-tests
    tags: [<%= iaas %>]
    file: git-kubo-ci/tasks/run-k8s-integration-tests-ci.yml
    input_mapping: {kubo-lock: kubo-lock-<%= iaas %>}
    on_failure: *on_failure_<%= iaas %>
  - task: pod-to-pod
    tags: [<%= iaas %>]
    file: git-kubo-ci/tasks/pod-to-pod.yml
    input_mapping: {kubo-lock: kubo-lock-<%= iaas %>}
    on_failure: *on_failure_<%= iaas %>
  - task: pv-pod-to-pod
    tags: [<%= iaas %>]
    file: git-kubo-ci/tasks/pv-pod-to-pod.yml
    input_mapping: {kubo-lock: kubo-lock-<%= iaas %>}
    on_failure: *on_failure_<%= iaas %>

- name: destroy-k8s-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'run-k8s-integration-tests-<%= iaas %>' ]
    - get: git-kubo-deployment
      passed: [ 'run-k8s-integration-tests-<%= iaas %>' ]
    - get: gcs-bosh-state
      passed: [ 'run-k8s-integration-tests-<%= iaas %>' ]
    - get: gcs-bosh-creds
      passed: [ 'run-k8s-integration-tests-<%= iaas %>' ]
  - put: git-kubo-deployment
    params:
      path: git-kubo-deployment
      status: pending
  - task: destroy-k8s
    tags: [<%= iaas %>]
    file: git-kubo-ci/tasks/destroy-k8s-instance.yml
    input_mapping: {kubo-lock: kubo-lock-<%= iaas %>}
    on_failure: *on_failure_<%= iaas %>

- name: destroy-bosh-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: git-kubo-deployment
      passed: [ 'destroy-k8s-<%= iaas %>' ]
    - get: kubo-lock-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'destroy-k8s-<%= iaas %>' ]
    - get: gcs-bosh-state
      passed: [ 'destroy-k8s-<%= iaas %>' ]
    - get: gcs-bosh-creds
      passed: [ 'destroy-k8s-<%= iaas %>' ]
  - put: git-kubo-deployment
    params:
      path: git-kubo-deployment
      status: pending
  - task: destroy
    tags: [<%= iaas %>]
    file: git-kubo-ci/tasks/destroy-bosh.yml
    input_mapping: {kubo-lock: kubo-lock-<%= iaas %>}
    on_failure: *on_failure_<%= iaas %>
  - put: kubo-lock-<%= iaas %>
    params: { release: kubo-lock-<%= iaas %> }
<% end %>

- name: success-notification
  plan:
  - get: git-kubo-deployment
    passed: <%= iaas_list.collect { |iaas| "destroy-bosh-#{iaas}" } %>
    trigger: true
  - get: git-kubo-ci
  - put: git-kubo-deployment
    params:
      path: git-kubo-deployment
      status: success
